article:
  title: インストゥルメントとノードについて
  content:
    - |
      ここではインストゥルメントの構造についてさらに細かく説明します。さらに、インストゥルメントの内部構造を組み立てる要素であるノードについても説明します。

      （ここはちょっと長いけど重要なとこです）

      ## インストゥルメント

      **インストゥルメント**は、その名の通り現実世界の「楽器」に相当する存在です。トラック（正確にはインストゥルメントトラック）に 1 つあり、受け取った入力に応じて、音の波形を生成して出力します。

      インストゥルメントへの入力は以下のものから成っています：

      * 周波数の時系列
      * イベント

      まず周波数の時系列では、そのときどきに鳴らすべき音の周波数 [Hz] が入力されます。
      たとえば o4c の音を鳴らすとき、o4c の周波数である約 261.63 が入力されます。次に o4d を鳴らすと、入力は約 293.66 に変わります。

      周波数の時系列はインストゥルメントに「接続」されており、常に何らかの値が供給されます。

      次にイベントについては、様々な種類がありますが、よく使われるものには以下があります：

      * ノートオン・ノートオフ
      * レジスタ設定

      ノートオンは、発音を開始するイベントです。鍵盤楽器であれば鍵盤を押さえること、管楽器であれば息を吹き込むことに相当します。

      ノートオフはノートオンの逆で、発音を終了するイベントです。鍵盤を離すこと、息を止めることに相当します。

    -
      note: |
        ModDL のノートオン・ノートオフは MIDI のものと異なり、ノートナンバーやベロシティの情報を含まず、純粋に発音の開始・終了だけを表すものです。したがって、管楽器のたとえの方が適切と思われます。
        （MIDI の仕様は、鍵盤を押さえると同時に高さと強さも確定する鍵盤楽器の特徴に由来するものでしょうか？）

    - |
      レジスタ設定は、特定のレジスタに割り当てた値を演奏中に変更するイベントです。電子楽器のつまみを操作することに相当します。

      イベントは周波数の時系列とは異なり、何らかの事象が起こったときだけ発行されます。

      インストゥルメントへの入力が具体的にどんな内容になるかは、MML によって定義されます。

    # `minimum.moddl` の MML を例にすると、周波数の時系列は次のようになります：

    #   * 最初の 0.5 秒間、o4c の周波数が持続する
    #   * 次の 0.5 秒間、o4d の周波数が持続する
    #   * 次の 0.5 秒間、o4e の周波数が持続する
    #   * …
      
    #   ### 入力の例

    #   インストゥルメントへの入力が具体的にどんな内容になるかは、MML によって定義されます。
    #   `minimum.moddl` の MML を例に、インストゥルメントへの入力を詳しく見てみましょう。

    #   `minimum.moddl` のトラック `a` に対する MML は `o4l4 cdefgab>c2` でした。

    #   * 最初の 0.5 秒間、o4c の周波数が持続する
    #   * 次の 0.5 秒間、o4d の周波数が持続する
    #   * 次の 0.5 秒間、o4e の周波数が持続する
    #   * …

    # -
    #   note:
    #     - |
    #       この文書では「オクターブ 4 のド」を o4c のように表します。「オクターブ 4 のド#」は o4c+、「オクターブ 4 のミ♭」は o4e- とします。

#    - |
#      周波数の時系列は、インストゥルメントに「接続」されており、常に何らかの値が供給されます。

#       イベントは、同じく `minimum.moddl` を例にすると次のようなものになります：
# 
#       * 最初に、ノートオン（o4c の分）が発生する
#       * 0.5 秒後、ノートオフ（o4c の分）が発生する。同時にノートオン（o4d の分）が発生する
#       * 0.5 秒後、ノートオフ（o4d の分）が発生する。同時にノートオン（o4e の分）が発生する
#       * …
# 
#       イベントは、何らかの事象が起こったときだけ発行されます。この点、常に供給される周波数とは異なっています。
# 

    - |
      以下の図は、インストゥルメントの概念をまとめたものです：

      <img src="./instrument.png" width=50%>

      ## ノード
      
      インストゥルメントにはさらに内部構造があります。インストゥルメントを構成する最小単位が**ノード**です。概ねシンセサイザーの部品（モジュール）に相当するような粒度のものと考えてください。
      
      ノードも入力として時系列データとイベントを受け取り、何らかの時系列データを出力します。この点でノードはインストゥルメントとよく似ていますが、次のようにインストゥルメントにはない特徴があります：

      * 入力される時系列データは周波数に限らない
      * 入力を受け付けない場合もある
      * 主要な入力以外にも任意の数の時系列データを受け付ける場合がある。受け付けない場合もある
      * 出力するのも音の波形とは限らない
      * 何も出力しない場合もある

      入力される時系列データは「主要なもの」と「補助的なもの」を区別します。主要なものを**主入力**（main input）、補助的なものを**パラメータ入力**（parameter inputs）と呼びます。主入力がなく、パラメータ入力だけがある場合もあります。また、パラメータ入力には一つ一つ名前がついています。

      まとめると、次の図のようになります。全てのノードが必ず持つ入出力の経路はありません。入力の有無・個数、出力の有無、対応するイベントの有無・種類は、全てノードの種類によって異なります。

      <img src="./node2.png" width=50%>

      ノードの重要な特徴は、**あるノードの出力を、別のノードの入力に接続できる**ことです。これにより、複雑な処理を組み立てることができます。たとえば「オシレータの出力をフィルタに通し、さらにエンベロープを適用する。フィルタにはカットオフ周波数などのパラメータを与える」といったことを表現できるようになります。

      <img src="./node_structure.png" width=50%>

    - note: |
        ここで `4000` や `3` という数値が出てきていますが、これらは「常に一定の値を出力する」ノードです。

        また、`*` も「2 つの入力の積を出力する」ノードです。2 つの入力はパラメータ入力であり、それぞれ `lhs`, `rhs` という名前がありますが、図では省略しています。

    - |
      この構造はすでに（原始的ではあるものの）減算合成式のシンセサイザーそのものですが、ModDL の式で書くと次のようになります。簡潔ですね！

      ```
      sawOsc | lpf { freq: 4000, q: 3 } * adsrEnv
      ```

      そしてこのノード構造は、そのままインストゥルメントとして使うことができます。ですが、ここで二つの疑問がわくかもしれません。
      
      前に、インストゥルメントの入力は周波数の時系列データとイベントである、と述べました。これらは、構築したノード構造のどこから入ってくるのでしょうか？　また、インストゥルメントの出力は音の波形である、とも述べましたが、これはノード構造のどこから取り出されるのでしょうか？

      まず入力について。入力のうち時系列データは、次の条件を満たす全てのノードに入ってきます：
      
      * 主入力を受け付ける
      * 構造において、主入力が割り当たっていない

      先ほどの構造で確認してみましょう。ここに登場するノードを全て挙げると、`sawOsc`, `lpf`, `4000`, `3`, `adsrEnv`, `*` です。このうち主入力を受け付けるものは `sawOsc`（主入力は周波数）と `lpf`（主入力は波形）ですが、このうち `lpf` にはすでに主入力が割り当たっています。よってデータを受け取るのは `sawOsc` となります。

      もう一つの入力であるイベントについては、単純にインストゥルメントを構成する全てのノードに通知されます。各ノードは自分が処理できるイベントだけを処理し、それ以外は無視するようになっています。

      次に出力について。こちらは、ノード構造の中で全体を束ねるノードの出力がインストゥルメントの出力となります。先ほどの構造では `*` です。

    -
      note: |
        「全体を束ねるノード」は必ず存在します。ノード構造は最も下流（出力側）のノードをルートとするツリー状の構造（正確には有向非循環グラフ）になるためです。


    - |
      以上のようなしくみで、ノード構造をインストゥルメントとして使えるようになっています。先ほどのノード構造を `instrument` 文にそのまま入れれば OK です。

      ```
      @instrument ^a, sawOsc | lpf { freq: 4000, q: 3 } * adsrEnv
      ```




# インストゥルメントは周波数の入力を波形に変える。さらにイベントを処理する
# インストゥルメントはノードの組み合わせで定義する
# ノードは主要な入力とパラメータ入力があり、出力がある。さらにイベントを処理する
# よく使うノードたち
