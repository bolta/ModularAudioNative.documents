function:
  name: '&&'
  desc: |
    論理積を求めます。

  operatorNotation: |
    `lhs && rhs`

  typeParams:
    -
      name: (Lhs, Rhs, Result)
      type: (Number, Number, Boolean)<br>| (Number, ModuleDef, ModuleDef)<br>| (ModuleDef, (Number | ModuleDef), ModuleDef)

  params:
    -
      name: '`lhs`'
      type: Lhs
      required: true
      desc: |
        左の項。

    -
      name: '`rhs`'
      type: Rhs
      required: true
      desc: |
        右の項。

  value:
    type: Result
    desc: |
      `lhs` と `rhs` がともに truthy かどうか。

  details:
    - |
      評価結果は必ず `1` か `-1` のどちらかになります。一部の言語で行われるように、`lhs` または `rhs` の値がそのまま返されるわけではありません。

      また、多くの言語では短絡評価が行われ、`lhs` が falsy であれば `rhs` は評価されませんが、ModDL では短絡評価が行われず `rhs` も評価されます。ただし、純粋な言語である ModDL では、短絡評価の有無が意味のある挙動の違いにつながることは（例外的に副作用を持つ %func(print) などの関数が絡む場合を除き）ありません。

      この演算子は Number と ModuleDef に対してオーバーロードされています。詳細は「%link(/reference/moddl/operators/overloaded_calculations)」を参照してください。
