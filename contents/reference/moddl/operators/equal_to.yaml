function:
  name: ==
  desc: |
    等価比較を行います。

  operatorNotation: |
    `lhs == rhs`

  typeParams:
    -
      name: (Lhs, Rhs, Result)
      type: (Number, Number, Boolean)<br>| (Number, ModuleDef, ModuleDef)<br>| (ModuleDef, (Number | ModuleDef), ModuleDef)<br>| (String, String, Boolean)

  params:
    -
      name: '`lhs`'
      type: Lhs
      required: true
      desc: |
        左の項。

    -
      name: '`rhs`'
      type: Rhs
      required: true
      desc: |
        右の項。

  value:
    type: Result
    desc: |
      `lhs` と `rhs` が等しいかどうか。

  details:
    - |
      %oper(not_equal_to) 演算子とは論理否定の関係にあり、`lhs != rhs` は `! (lhs == rhs)` と等価です。

      一部の言語の `==` 演算子で見られるような、柔軟な比較を行うことはありません（ModDL には `===` 演算子はありません）。

      この演算子は Number と ModuleDef に対してオーバーロードされています。詳細は「%link(/reference/moddl/operators/overloaded_calculations)」を参照してください。
