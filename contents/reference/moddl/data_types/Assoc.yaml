dataType:
  name: Assoc
  desc:
    - |
      **連想配列**（連想）を表す型です。連想は、**キー**と**値**の組を 0 個以上の任意の数だけ、順序を定義せずにまとめたものです。

      キーは文字列でなくてはならず、また一つの連想の中で一意でなくてはなりません。値は任意の型の値にすることができます。値の型は統一されている必要はありません。

      連想に属するキーと値の組を**エントリ**と呼びます。

  notations:
    - |
      `{ }` で任意の数のエントリを囲んで表します。 

      エントリは、キーと値を `:` で区切って表します。キーは識別子でなくてはならず、`" "` などで囲みません。エントリの間は `,` で区切ります。

      最後のエントリの後にも冗長な `,` を付けることができます。

      例を以下に示します：
      ```
      { }
      { foo: 42, bar: { baz: "qux" }, }
      ```


      `[ ]` で任意の数の要素を囲んで表します。要素の間は `,` で区切ります。
      
      最後の要素の後にも冗長な `,` を付けることができます。

      例を以下に示します：
      ```
      []
      [1, 3, 5, ]
      [foo, ["bar", :baz], ^qux]
      ```

  details:
    - |
      連想に対しては、キーを指定して、対応する値を取り出すことができます。
      
      連想の値を取り出すには %oper(access_entry) 演算子を使います。

      ```
      let a = { foo: 42, bar: 99 };
      a.foo
      // ==> 42
      ```
