article:
  title: モジュールのレジスタについて
  content:
    - |
      モジュール定義内に記述する数値を、**レジスタ**に変更することができます。

      レジスタは可変の数値を保持するノードであり、その値は MML の `y` コマンドで変更することができます。

      モジュール内部の様々な値を演奏中に操作できることで、より多彩な演奏表現を実現できるようになります。

      ## レジスタの定義

      モジュール定義の際、数値に後置 `@` 演算子でラベルを設定すると、その数値はレジスタになります。

      次の例では、インストゥルメントのモジュール定義に `d` と `a` という 2 つのレジスタを定義しています。`d` の初期値は `0,5`、`a` の初期値は `0` であり、これらの値を演奏中に `y` コマンドで変更しています：

      ```
      @instrument ^a, pulseOsc { duty: 0.5@d } * adsrEnv { attack: 0@a }

      a o4l4

      a cde
      a yd,0.25 // pulseOsc の duty を変更
      a cde
      a ya,0.1 // adsrEnv の attack を変更
      a cde
      ```

      レジスタのラベルには任意の識別子を使うことができます。上記の例では 1 文字ですが、長くてもかまいません。またノードのパラメータ名と同じ `duty`, `attack` でもかまいません。

      ## レジスタ名へのプレフィックス付与

      レジスタの名前が衝突してしまうことがあります。

      たとえば、1 つのモジュール定義を 2 回使う場合を考えます。今度の例では、先ほどのインストゥルメントと同様の定義を変数に設定して、2 回使っています：

      ```
      @let :m, pulseOsc { duty: 0.5@d } * adsrEnv { attack: 0@a }
      @instrument ^a, m + 0.5 * =freq=> (2 * freq) | m
      ```

      ここでは モジュール定義 `m` を 2 回使っているため、`m` の中で定義したレジスタ `d` と `a` は 2 つずつ存在することになります。この状態では、`y` コマンドでレジスタの値を変更すると、両方に作用してしまいます。

      これを解決するために、レジスタ名にプレフィックスを設定することができます：

      ```
      @let :m, pulseOsc { duty: 0.5@d } * adsrEnv { attack: 0@a }
      @instrument ^a, m@@m1 + 0.5 * =freq=> (2 * freq) | m@@m2
      ```

      今回はモジュール定義 `m` を参照する際に、`@@m1` と `@@m2` を付与しています。こうすると、1 回目の `m` のレジスタには `m1.` というプレフィックスが付与されます。同様に 2 回目の方には `m2.` が付与されます。

      これによって、次のようにレジスタを区別できるようになります：

      ```
      a o4l4

      a cde
      a ym1.d,0.25 // m1 の pulseOsc の duty を変更
      a cde
      a ym1.a,0.1 // m1 の adsrEnv の attack を変更
      a cde
      a ym2.d,0.125 // m2 の pulseOsc の duty を変更
      a cde
      a ym2.a,0.5 // m2 の adsrEnv の attack を変更
      a cde
      ```

      なお、レジスタの名前空間はトラックごとに独立しているので、同じ名前のレジスタが異なるトラックにあることは問題になりません。

      ## レジスタの取捨選択と名称変更

      レジスタ名の衝突を回避するには他の方法もあります。ここでは参照するレジスタを取捨選択したり、設定されていた名前を変更したりすることで衝突を防ぐ方法を紹介します。

      ここでは、モジュール定義 `m` があり、レジスタ `r`, `s`, `t`, `u` を含んでいるとします。 

      このとき、次のようにすると、`m` に含まれるレジスタのうち、`r`, `s` だけを参照することができます。このとき `t`, `u` は参照できなくなります：

      ```
      m#(r, s)
      ```

      逆に `r`, `s` を除外することもできます。このときは `t`, `u` だけを参照できます：
      ```
      m#(!r, !s)
      ```

      参照するレジスタの名前を変更するには次のようにします。

      次の例では、`r` を `rrr` という別の名前で参照します。同様に `t` は `ttt` として参照します。`s` はそのまま使います。`u` は使いません。こうすれば `r`, `t`, `u` は衝突しなくなります：

      ```
      m#(r->rrr, s, t->ttt)
      ```

      TODO サンプル

# サブレジスタについてはまだ対応しているノードがないので、まだ記述しない
