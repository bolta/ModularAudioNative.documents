article:
  title: MML の基本
  content:
    - |
      MML は、各トラックの時間的なふるまい（いわゆる「譜面」）を定義するための言語です。MML は音符や休符、その他の音楽表現などを表す**コマンド**を並べて記述します。

      MML のコマンドの多くは「英字 1 文字（+ 引数）」の形式になっており、簡潔に記述することができます。

      ここでは ModDL 処理系が解釈する MML の基本的な機能について解説します。

    - note:
      - |
        MML は ModDL に固有の概念ではなく、歴史的に多くの MML の体系が実装され、用いられてきました。それらは備える機能も構文も（大まかな類似性はあるものの）基本的に互換性がなく、対象とする音源も実行環境も異なる、多種多様なものでした。
        
        ModDL の MML もそのうちの 1 つであり、仕様は独自のものです。

    - note:
      - |
        ModDL の MML では、（おそらく歴史的な MML 処理系の多くとは異なり）基本的に大文字小文字を**区別します**。

    - |
      ## 音符・休符

      ドレミファソラシの音符を、それぞれ `c`, `d`, `e`, `f`, `g`, `a`, `b` で表します。休符は `r` で表します。

      シャープとフラットは、音名の後に `+` または `-` をつけて表します。同じ種類のものであれば重ねてつけることができます。`c+` でド♯、`a--` でラ♭♭、という具合です。

      音符と休符の後には音長を指定することができます。`e8` は ミの 8 分音符、`g+1` はソ♯の全音符、`r4.` は付点 4 分休符、といった要領です。音長については後で詳しく説明します。

      ## オクターブ

      `o` + 数値でオクターブを指定します。`o4` がピアノの中央のオクターブを表します。

      `o` コマンドを一度も使っていない状態では、`o4` が指定されているものと見なされます。

      また `>` を使うと、現在のオクターブを基準として 1 オクターブ上げることができます。同様に `<` で 1 オクターブ下げることができます。たとえば、`o4 gab o5 c o4 bag` と書く代わりに `o4 gab>c<bag` と書くことができます。こうすると、オクターブの数値をあまり意識せずにフレーズを記述することができます。

      ## 音長

      ### 音長の表記

      音符・休符に付ける音長は、「1 小節（4 拍）をいくつに分割するか」の数値で指定します。4 分音符なら音長は `4`、8 分音符なら `8`、全音符は `1`、1 拍を 3 等分する 3 連符の 1 つは `12` となります。

      タイ記号 `^` を使うと、音長同士を連結することができます。たとえば `2^8` は、2 分音符と 8 分音符を合わせた長さを表します。なお、負の音長を連結することもできます。たとえば `1^-16` は 4 拍より 1/4 拍だけ短い長さを表します。

      音長の数値に付点 `.` を付けると、元の長さの半分の長さが追加されます。つまり、`2.` は `2^4` と同じ長さになります。さらに付点は複数付けることもでき、1 つ付けるごとに直前の付点で追加された長さの半分が追加されます。これにより、`2...` は `2^4^8^16` と同じ長さになります。これは `1^-16` と同じ長さでもあります。

      `4.^2..` のように、付点とタイを組み合わせることもできます。

    - note:
      - |
        音長に指定する数値は、デフォルトでは 384 の約数しか使うことができません。言い換えると、全ての音長は「384 分音符」の整数倍の長さでなくてはなりません。これに違反するとエラーになります。

        なお、付点はタイと同様の扱いになるため、384 の約数しか書いていなくてもエラーになるケースがあります。たとえば音長 `96` は 384 の約数なので問題ありませんが、`96...` は `96^192^384^768` と等価なのでエラーになります。

        この 384 という値には `ticksPerBar` という名前があり、`ticksPerBar` 文によって変更することができます。`ticksPerBar` を 5 や 7 の倍数にすると、5 連符や 7 連符を使えるようになります。

        ```
        @ticksPerBar 160
        a l20cdefg // 1 拍を 5 等分
        ```

    - |
      ### 音長の省略

      音長は省略することができます。また省略した場合の音長を `l`（`L`）コマンドで指定することができます。たとえば `l8` を指定すると、それ以降 `cde4` は `c8d8e4` と同じ意味になります。

      付点音長の数値部分だけを省略したり、省略した音長をタイで連結したりすることもできます。たとえば `l4` の状態では、`c.` は `c4.` と同じです。また `c^^1^..` は `c4^4^1^4..` と同じです。

      `l` コマンドを一度も使っていない状態では、`l4` が指定されているものと見なされます。

    - note:
      - |
        `l` コマンドに指定できる音長は単独の数値から成るものだけです。付点やタイを使うことはできません。

    - note:
      - |
        `l` コマンドは大文字と小文字を区別しません。ModDL の MML では基本的に大文字と小文字を区別しますが、これは例外です。

    - |
      ## 音長比

      音長比とは、音符一つ一つを演奏する際の、「音符の音長」に対する「実際に発音している音長」の比率のことです。

      通常は音符の音長一杯に発音しますが、音長比を小さくするとより早いタイミングで発音を終了するようになります。

      これにより、スタッカートなどの歯切れのよい演奏表現を行うことができます。

      音長比は `q` + 数値で指定します。指定する数値 x の範囲は 0 ≦ x ≦ 8 であり、音符を実際に発音する音長は音符の音長の x/8 になります。デフォルトは `q8` です。

      たとえば `q6 c4d4e4` は `q8 c8.r16d8.r16e8.r16` と同じになります。さらに音長比を小さくした `q4 c4d4e4` は `q8 c8r8d8r8e8r8` と同じになります。

      ## スラー

      一般にスラーとは、音符と音符を「何らかの方法でなめらかにつなぐ」ことです。方法は楽器によってさまざまで、擦弦楽器であれば弓を返さない、管楽器であればタンギングを行わない、などの方法があります。

      ModDL MML におけるスラーは、「ノートオフ・ノートオンを行わず、周波数だけを変化させる」ことを意味します。

      スラーを行うには音符の直後に `&` を付けます。たとえば `c4&d4` とすると、`c4` のノートオフと `d4` のノートオンが省略され、高さだけが変化します。

    - note:
      - |
        スラーの始点の音符においては音長比は無視され、音長一杯に発音されます。

        つまり、`q4 c4&d4` は `q8 c4&d8r8` と同じになります（`c` は変化しません）。

    - |
      ## 音量

      広い意味で「音量」に相当するものには「ベロシティ」（`v`）と「ボリューム」（`V`）の 2 種類があります。これらは現在のバージョンでは同じものですが、異なる用途に使い分けることが想定されています。

      ベロシティは「演奏における発音の強さ」を表します。楽器の演奏においては、ピアノの鍵盤や打楽器を叩く強さ、管楽器に息を吹き込む強さ、などが対応するものです。

      これに対してボリュームは「あるトラックの全体的な音の大きさ」を表します。音量を調節するつまみやフェーダーのようなものと考えてください。

      したがって、以下のような使い分けが推奨されます：

      * トラック内の強弱の表現にはベロシティを使う
      * トラック間のレベルの調整にはボリュームを使う

      ベロシティ・ボリュームはともに数値で指定します。たとえば `v15`, `V8` のようにします。

      基準値はベロシティ・ボリュームともに 15 であり、これらを一度も指定していないときと同じ音量になります。これよりも小さい値を指定すると音量は小さくなり、0 で無音になります。

      ## テンポ

      テンポを曲の途中で変更したいときは `t` コマンドを使います。`t180` のように、新しいテンポを bpm 単位で指定します。

      テンポの変更はどのトラックで行っても、全てのトラックに反映されます。

