article:
  title: ModDL によるプログラミング
  content:
    - |
      ModDL の最終的な目的はモジュール定義とシーケンスを構築することですが、そのために役立つツールとして、プログラミング言語の機能を備えています。

      プログラミング言語としての ModDL のスタイルは、関数を値として取り回すことを許し、変数や環境を変更することを許さない、関数型言語のスタイルです。

      ここでは ModDL のプログラミング言語としての側面を解説していきます。

      ## データ型

      多くのプログラミング言語に備わっている数値（Number）、文字列（String）、配列（Array）などの基本的なデータ型を、ModDL も備えています。関数型言語の一種である以上は当然、関数（Function）型も備えています。

      一方、ModDL に特有のデータ型としては波形（Waveform）やトラックセット（TrackSet）、そしてモジュール定義（ModuleDef）があります。これらは全て発音や演奏の目的に特化した型です。なお、「モジュールの構築」で示したモジュール定義の例は、全てモジュール定義型の式です。

      データ型の詳細については「（TODO）」を参照してください。

      ModDL の変数には型がありません。変数の型は明示的に記述されることも、暗黙的に推論されることもありません。ただし、全ての変数には強く型付けられた値が割り当てられ、その割り当てが後から変更されることはないため、その意味ではある変数に対応する型は終始一貫しています。

      ## データ構造

      ModDL は、データ構造を構築するためのデータ型として、配列（Array）と連想（Assoc）を備えています。

      配列は `0` から始まる整数の添字に任意の型の要素を関連づけます。

      連想は文字列のキーに任意の型の値を関連づけます。キーの順序は定義されません。

      いずれも、異なる型の要素・値を混在させることができます（heterogeneous）。またそれを禁じることは（言語レベルでは）できません。

    - note:
      - |
        「連想」（Assoc）は「連想配列」（Associative Array）を省略したものであり、「連想配列」の名称はプログラミング言語 AWK から借用したものです。

        他の言語では同様のデータ型が「ハッシュ」（Hash）、「マップ」（Map）、「辞書」（Dictionary）などと呼ばれていますが、いずれも多義的になりがち（ハッシュ値、map 関数、自然言語の辞書）であったり、「ハッシュ」については実装を規定しすぎるなどの問題があるように思われます。

        その点「連想配列」は余計な含みがなく、誤解の恐れがない点で優位ですが、唯一の難点は少し長いことです。

        そこで省略形を採用しています。

    - |
      ## 変数

      ### ファイルスコープ変数

      ### ローカル変数


      ## ファイル分割

      ## Io

      ### Io とは

      ### `do` 式

