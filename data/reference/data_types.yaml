article:
  title: ModDL のデータ型
  content:
    - |
      ModDL のデータ型には以下のものがあります。
    -
      table:
        head:
          - 名前
          - 説明
          - 例
        body:
          -

            - Number
            - |
              数値。ModDL の数値は全て 32 ビット浮動小数点数です。

              また、真偽値についても数値で表し、独立した型はありません。
              真偽値としての数値の解釈では、**正の数値を真、負の数値と 0 を偽**とします。一般的なプログラミング言語の解釈とは異なるので注意してください。
              
              定数 `true`, `false` は、それぞれ真と偽を代表する値として `1`, `-1` と定義されています。
            - |
              * `42`
              * `-3.14`
          -
            - Waveform
            - |
              波形。波形を参照する値です。`waveform` ディレクティブによって変数に割り当てられます。

            - |
              この型の値をリテラルで直接表現する方法はありません。次のようなディレクティブを記述すると、変数 `piano` で波形を参照できます。

              * ``@waveform `piano`, "/path/to/piano.wav"``

          -
            - TrackSet
            - |
              トラックセット。1 つまたは複数のトラックを表現する値です。
            - |
              * `^a`
              * `^bcDE678`

          -
            - QuotedIdentifier
            - |
              識別子の引用形式。識別子が指す変数の値ではなく、識別子そのものを表現します。
              `let` ディレクティブで変数を定義するとき、指定する変数名はこの型の値である必要があります。
            - |
              * `` `foo` ``

          -
            - String
            - |
              文字列。ファイルパスなどの表現に使います。
            - |
              * `"./my_favorite_synths.moddl"`
              * `"hello, world"`

          -
            - Array
            - |
              配列。任意の値（要素）を任意の個数、順序付きで並べたものです。
              各要素の型は統一されている必要はありません。
              添字は、先頭の要素を `0` とします。
            - |
              * `[]`
              * `[1, 3, 5]`
              * ``[foo, ["bar", `baz`], ^qux, ]``

          -
            - Assoc
            - |
              連想配列。キーと値の組（エントリ）を任意の個数、順序を定義せずに格納します。
              キーは文字列でなくてはならず、また各々の連想配列の中で一意でなくてはなりません。値は任意の型の値を取ることができます。値の型は統一されている必要はありません。
              キーを指定して、対応する値を取り出すことができます。
            - |
              * `{ }`
              * `{ foo: 42, bar: { baz: "qux" } }`

          -
            - NodeStructure
            - |
              ノード構造。ノードの接続関係を記述したものです。

              TODO 推敲 ~~ModDL に記述したノード構造は、演奏時に実際のノードとして構築されます。
              ModDL でノードそのものを記述することはできません。
              blah blah~~

            - |
              * `sineOsc`
              * `node (f) uniformNoise | lpf { cutoff: f } * adsrEnv { attack@a: 0.5 }`
          -
            - NodeFactory
            - ノードファクトリ。
            - |
              * sineOsc

          -
            - Function
            - 関数。
            - |
              * `map`
              * `func (x) x ^ 2`
