article:
  title: 減算合成
  content:
    - |
      まずはシンセサイザーの定番中の定番、減算合成からやっていきましょう。

      といっても、原始的な減算合成シンセサイザーは[ノードの説明](../1000-getting_started/40-instruments_and_nodes.html#ノード)のときに作ったので、ここではこれを発展させて、もう少しリッチな表現を目指してみることにします。

      ## 振幅にエンベロープを適用する

      以前作ったシンセサイザーを再掲します。ついでに適当な MML を付けています：

      ```
      @instrument ^a, sawOsc | lpf { freq: 4000, q: 3 } * adsrEnv

      a o4l4 cdefgab>c2
      ```

      この時点で、オシレータをフィルタに通し、さらにエンベロープを適用するという、減算合成シンセサイザーの基本構造を満たしていることは確かです。

      ですが、音を出してみるとわかりますが…面白くないのです。音の時間的な変化というものが何もなく、いかにも機械的な（機械が出す音だから当たり前なのですが）、単調な音です。<!--ノートオンで音が鳴り、ノートオフで止まる、それだけです。-->

      もうちょっと、なんとかならないのでしょうか？

      音の時間的な変化といえば、シンセサイザーにおける最も基本的な時間的変化は、振幅のエンベロープです。持続音か減衰音か、音の立ち上がりにかかる時間はどれだけか、といったことを操作できるだけでも、俄然音が豊かになるものです。
      
      上掲のインストゥルメントの定義にはエンベロープのノード `adsrEnv` が登場していますが、特徴のある音量変化は起きていません。それはなぜかというと、`adsrEnv` に対して**パラメータ**を設定していないからです。`adsrEnv` には一般的な ADSR エンベロープと同様のパラメータ、すなわちアタックタイム、ディケイタイム、サステインレベル、リリースタイムを設定できます。これらを設定してやれば、多彩なエンベロープを実現することができます。

      <img src="./adsr.png" width=50%>

      たとえば、


    - tips:
      - |
        ModDL の中で時間を扱う際、単位は基本的に「秒」に統一されています。これに基づき、`adsrEnv` の `attack`, `decay`, `release` の単位は秒です。特段の事情がなければ「ミリ秒」や「サンプル」を使うことはありません。

        振幅は、符号がない場合 [0, 1]、符号がある場合 [-1, 1] で統一されています。`adsrEnv` やその他のエンベロープジェネレータでは振幅の最大値は 1 ですが、これは前者の例。各種オシレータやノイズジェネレータの出力は [-1, 1] であり、これは後者の例です。

        ただし、特に MML では、慣習を尊重するケースもあります。たとえば `V` コマンドは振幅に関するコマンドでありながら、基準値は 1 ではなく 15 となっています。これは歴史的な MML の仕様において音量の最大値が 15 のものがあったことに由来するものです。

    - |

      ここまで読まれて、疑問に思われるかもしれません。じゃあここまで使っていた、パラメータを指定しない adsrEnv には何の意味があるの？

      これだけじゃだめ？

      ```
      @instrument ^a, sawOsc | lpf { freq: 4000, q: 3 } // adsrEnv を削除
      a o4l4 cdefgab>c2
      ```

      確かに、これでも同じ音が出るので、問題ないように思われます。

      ですが、少し違う MML で試してみてください。音符と音符の間に休符が挟まっています。まずは `adsrEnv` があるものから：

      ```
      @instrument ^a, sawOsc | lpf { freq: 4000, q: 3 } * adsrEnv
      a o4 c8r8d8r8e8
      ```

      休符のところで音が切れるのがわかると思います。

      さて、ここで `adsrEnv` を削除すると：

      ```
      @instrument ^a, sawOsc | lpf { freq: 4000, q: 3 }
      a o4 c8r8d8r8e8
      ```

      どうでしょうか。休符が無視されて、音が鳴りっぱなしになってしまいました。

      `adsrEnv` は「音を止める」役割を果たしていたことがわかります。休符を演奏するとき、ノートオフのイベントが発生しますが、ノートオフに反応して音を止める、つまり出力を 0 にするのは `adsrEnv` の役割なのです。

      逆に、パラメータを指定しない `adsrEnv` は、「ノートオンと同時に全開で発音し、ノートオフと同時に完全に消音する」以外のことは何もしません。したがって、とりあえずノートに反応する能力だけでも与えたい、というときに `* adsrEnv` をつけるのは便利な方法です。

      ## フィルターにもエンベロープを適用する

      ## パラメータを演奏中に変化させる

# 前回のおさらい
# （前回のサンプルコードを再掲）
# オシレータをフィルタに通し、エンベロープを適用するという、減算合成シンセの基本構造を満たしてはいる
# が、音を出してみるとわかるが、面白くない
# ここには音の時間的変化が何もない
# ADSR エンベロープを使っているが、特に時間的変化は感じられない
# 

